{"version":3,"sources":["logo.svg","pages/PageOne.js","App.js","pages/Splash.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PageOne","react_default","a","createElement","className","react_top_app_bar_dist_default","title","dist","react_card_dist_default","react_card_dist","react_tab_bar_dist_default","react_tab_dist_default","react_material_icon_dist_default","key","icon","react_fab_dist_default","Component","App","value","this","setState","pages_PageOne","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iUCyEzBC,mLArDX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,MAAM,UAERL,EAAAC,EAAAC,cAACI,EAAA,KAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,IAAD,KACEN,EAAAC,EAAAC,cAACI,EAAA,KAAD,KACEN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,KACED,EAAAC,EAAAC,cAACM,EAAA,mBAAD,KACER,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAACM,EAAA,mBAAD,KACER,EAAAC,EAAAC,cAAA,oBAEFF,EAAAC,EAAAC,cAACM,EAAA,mBAAD,KACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,4JAOVH,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACED,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACED,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBACdH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAcW,IAAI,OAAOC,KAAK,WAGlCb,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACED,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBACdH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAcW,IAAI,OAAOC,KAAK,kBAGlCb,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAKE,UAAU,WACbH,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAKY,KAAMb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,aAEbH,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACED,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBACdH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAcW,IAAI,OAAOC,KAAK,UAGlCb,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KACED,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBACdH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAcW,IAAI,OAAOC,KAAK,sBA9CtBE,aC8BPC,GC9BMD,gMDOPH,EAAKK,GACfC,KAAKC,SAASP,EAAKK,oCAajB,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkB,EAAD,cAlBQL,cEXEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d602bf88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport TopAppBar, {TopAppBarFixedAdjust} from '@material/react-top-app-bar';\nimport MaterialIcon from '@material/react-material-icon';\nimport Button from '@material/react-button';\nimport Select from '@material/react-select';\nimport Card, {\n  CardPrimaryContent,\n  CardMedia,\n  CardActions,\n  CardActionButtons,\n  CardActionIcons\n} from \"@material/react-card\";\nimport Tab from '@material/react-tab';\nimport TabBar from '@material/react-tab-bar';\nimport Fab from '@material/react-fab';\n\nclass PageOne extends Component {\n  render() {\n    return (\n      <div className=\"Page\">\n        <TopAppBar\n          title='Extra'\n          />\n        <Grid>\n          <Row>\n            <Cell>\n              <Card>\n                <CardPrimaryContent>\n                  <h4>Slang of the day</h4>\n                </CardPrimaryContent>\n                <CardPrimaryContent>\n                  <h1>Hyphy</h1>\n                </CardPrimaryContent>\n                <CardPrimaryContent>\n                  <div className=\"content\">Oakland slang meaning \"hyperactive\". More specifically it is an adjective that describes the music and the urban culture associated with that area.</div>\n                </CardPrimaryContent>\n              </Card>\n\n            </Cell>\n          </Row>\n        </Grid>\n        <TabBar>\n          <Tab>\n            <span className='mdc-tab__text-label'>\n              <MaterialIcon key='item' icon='menu' />\n            </span>\n          </Tab>\n          <Tab>\n            <span className='mdc-tab__text-label'>\n              <MaterialIcon key='item' icon='star_border' />\n            </span>\n          </Tab>\n          <Tab className='app-fab'>\n            <Fab icon={<span className=\"material-icons\">school</span>}/>\n          </Tab>\n          <Tab>\n            <span className='mdc-tab__text-label'>\n              <MaterialIcon key='item' icon='mic' />\n            </span>\n          </Tab>\n          <Tab>\n            <span className='mdc-tab__text-label'>\n              <MaterialIcon key='item' icon='search' />\n            </span>\n          </Tab>\n        </TabBar>\n      </div>\n    );\n  }\n}\n\nexport default PageOne;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\n\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport TopAppBar, {TopAppBarFixedAdjust} from '@material/react-top-app-bar';\nimport MaterialIcon from '@material/react-material-icon';\nimport Button from '@material/react-button';\nimport Select from '@material/react-select';\nimport Card, {\n  CardPrimaryContent,\n  CardMedia,\n  CardActions,\n  CardActionButtons,\n  CardActionIcons\n} from \"@material/react-card\";\nimport Tab from '@material/react-tab';\nimport TabBar from '@material/react-tab-bar';\nimport Fab from '@material/react-fab';\n\nimport PageOne from './pages/PageOne';\nimport Splash from './pages/Splash';\n\nclass App extends Component {\n\n  updateState(key, value) {\n    this.setState(key, value);\n  }\n\n  render() {\n\n    let splash = false;\n\n    if (splash) {\n      return (\n        <Splash/>\n      );\n    } else {\n\n      return (\n        <div className=\"App\">\n          <PageOne/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport TopAppBar, {TopAppBarFixedAdjust} from '@material/react-top-app-bar';\nimport MaterialIcon from '@material/react-material-icon';\nimport Button from '@material/react-button';\nimport Select from '@material/react-select';\nimport Card, {\n  CardPrimaryContent,\n  CardMedia,\n  CardActions,\n  CardActionButtons,\n  CardActionIcons\n} from \"@material/react-card\";\nimport Tab from '@material/react-tab';\nimport TabBar from '@material/react-tab-bar';\nimport Fab from '@material/react-fab';\n\nclass Splash extends Component {\n  render() {\n    return (\n      <div className=\"app_bg\">\n        <div className=\"buttons_section\">\n          <Button className=\"sign_in\">Sign in</Button>\n          <br/>\n          <Button className=\"sign_up mdc-button--outlined\">Sign up with Google</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Splash;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}